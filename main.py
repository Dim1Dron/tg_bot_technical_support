from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
import json
import datetime
import function
import keyboard
from database import db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
from aiogram.utils.exceptions import (MessageNotModified,
                                      CantParseEntities, MessageToDeleteNotFound, 
                                      MessageTextIsEmpty)
from openpyxl import Workbook
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def error_handler(func):
    async def wrapper(message: types.Message):
        try:
            await func(message)
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    return wrapper

def readingFile():
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª config.json –¥–ª—è —á—Ç–µ–Ω–∏—è
    with open('config.json', 'r', encoding="UTF-8") as file:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ JSON –≤ —Å–ª–æ–≤–∞—Ä—å
        config = json.load(file)
        return config

config = readingFile()

id_dict = {}
message_dirt = {}

bot = Bot(config["TOKEN"])
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class MainState(StatesGroup):
    Administrator = State()  # –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤

async def on_startup(_):
    print("The bot is running!")

@dp.message_handler(commands="start")
@error_handler
async def cmdStart(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await function.ClientRegistration(message):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await message.answer(text=config["TEXT_FOR_EXPERIENCED"])
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
        await message.answer(text=config["TEXT_FOR_BIGENNERS"])

@dp.message_handler(commands="admin")
@error_handler
async def cmdAdmin(message: types.Message):
    global config
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ "/admin"
    arguments = message.get_args()
    if config["ADMIN_PASSWORD"] == arguments:
        await message.answer(text=config["HELLO_ADMIN"],
                             reply_markup=keyboard.kb_admin)
        id = message.from_user.id
        config["admin_user"] = id
        with open(f'config.json', "w", encoding='utf-8') as file:
            json.dump(config, file, indent=4, ensure_ascii=False)
        config = readingFile()

@dp.message_handler(commands="group", chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
@error_handler
async def cmdGroup(message: types.Message):
    global config
    if config["admin_user"] == message.from_user.id:
        id = message.chat.id
        config["chat_id"] = id
        with open(f'config.json', "w", encoding='utf-8') as file:
            json.dump(config, file, indent=4, ensure_ascii=False)
        config = readingFile()
        await bot.send_message(chat_id=message.from_user.id,
                                text="–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        

async def is_user_in_group(group_id: int, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=group_id, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

@dp.message_handler(Text("üìã –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"))
@error_handler
async def cmdPersonal(message: types.Message):
    if config["admin_user"] == message.from_user.id:
        user_statuses = []
        answer = await function.PersonalId()
        results = [item[0] for item in answer]
        i = 1
        for user_id in results:
            in_group = await is_user_in_group(config["chat_id"], user_id)
            if in_group:
                if user_id != config["admin_user"]: 
                    people = await function.CheckName(user_id)
                    user_statuses.append(f"{i}. {people[2]} {people[3]}")
                    i += 1
        if user_statuses == []:
             await message.answer(text="–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        else:
            await message.answer("–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n"+ ''.join(user_statuses), parse_mode="HTML")

@dp.message_handler(Text("üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"))
@error_handler
async def OperatorList(message: types.Message):
    if config["admin_user"] == message.from_user.id:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        data = await function.historyInfo()

        if not data:
            await message.answer(text="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞!")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        wb = Workbook()

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
        ws = wb.active

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        ws.append(['‚Ññ', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–î–µ–π—Å—Ç–≤–∏–µ', '–î–∞—Ç–∞'])

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–Ω–∏–≥—É –¥–∞–Ω–Ω—ã–º–∏
        for i, item in enumerate(data, start=1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            people = await function.CheckName(item[1])
            ws.append([i, people[2], people[3], item[2], item[3]])

        # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥–∏
        buffer = BytesIO()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É –≤ –±—É—Ñ–µ—Ä –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        await wb.save(buffer)

        # –°–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –±—É—Ñ–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–æ
        buffer.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        file_name = "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.xlsx"
        await bot.send_document(chat_id=message.from_user.id, document=(file_name, buffer))

@dp.message_handler(commands=['registration'])
@error_handler
async def register_user(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.get_args()
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
    if args:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
        try:
            first_name, last_name = args.split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ
            if first_name.strip() and last_name.strip():
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await db.execute("UPDATE client SET first_name = ?, last_name = ? WHERE id = ?", first_name, last_name, message.from_user.id)
                await message.reply("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            else:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: /registration –ò–º—è –§–∞–º–∏–ª–∏—è")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /registration –ò–º—è –§–∞–º–∏–ª–∏—è")

@dp.message_handler(commands="close")
@error_handler
async def cmdClose(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –∑–∞—è–≤–∫–µ, —Å –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä
    data = await function.CheckDialog(operator_id=message.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if data == False:
        return
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ª—É—á–∞–µ–º id –∫–ª–∏–µ–Ω—Ç–∞
        id_client = data[2]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏
        await bot.send_message(chat_id=id_client,
                            text=config["OPERATOR_CLOSE"])
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –¥–∏–∞–ª–æ–≥–µ –∏ –∑–∞—è–≤–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.execute("DELETE FROM dialog WHERE operator = ? AND client = ?", message.from_user.id, id_client)
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        text = message_dirt[f"{id_client}"].text
        del message_dirt[f"{id_client}"]
        parts = text.split("\n")
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        text_part = parts[1].split(": ")[1]
        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –æ–±—Ä–∞—â–µ–Ω–∏—è
        time_part = parts[2].split(": ")[1]
        await db.execute("DELETE FROM application WHERE text = ? AND time = ?", text_part, time_part)
        del id_dict[f"{message.from_user.id}"]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        current_datetime = datetime.datetime.now()
        formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M")
        await db.execute("INSERT INTO history (user_id, action, time) VALUES (?, ?, ?)", message.from_user.id, f"–ó–∞–∫—Ä—ã–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ: {text_part}", formatted_datetime)

@dp.callback_query_handler(text='delete application')
@error_handler
async def deleteApplication(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è callback –∑–∞–ø—Ä–æ—Å–∞
    text = callback.message.text
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    parts = text.split("\n")
    # –ü–æ–ª—É—á–∞–µ–º id –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    id_part = parts[0].split(": ")[1]
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –∏–∑ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    text_part = parts[1].split(": ")[1]
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    time_part = parts[2].split(": ")[1]
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞—è–≤–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.execute("DELETE FROM application WHERE text = ? AND time = ?", text_part, time_part)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    current_datetime = datetime.datetime.now()
    formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M")
    await db.execute("INSERT INTO history (user_id, action, time) VALUES (?, ?, ?)", callback.from_user.id, f"–£–¥–∞–ª–∏–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ: {text_part}", formatted_datetime)
    await bot.send_message(chat_id=id_part, 
                            text=f"–û–ø–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: {text_part}")
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –∏–∑ —á–∞—Ç–∞
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    
@dp.callback_query_handler(text='reply to the request')
@error_handler
async def responseToApplication(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–∞–ª–æ–≥–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    data = await function.CheckDialog(operator_id=callback.from_user.id)
    # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ
    if data:
        await bot.send_message(chat_id=callback.message.chat.id,
                                text=config["REFUSAL_TO_RESPOND_TO_AN_APPLICATION"])
        return
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è callback –∑–∞–ø—Ä–æ—Å–∞
    text = callback.message.text
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    parts = text.split("\n")
    # –ü–æ–ª—É—á–∞–µ–º id –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    id_part = parts[0].split(": ")[1]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∫–ª–∏–µ–Ω—Ç–∞
    id_dict[f"{callback.from_user.id}"] = int(id_part)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –∏–∑ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    text_part = parts[1].split(": ")[1]
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –¥–∏–∞–ª–æ–≥–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.execute("INSERT INTO dialog (operator, client) VALUES (?, ?)", callback.from_user.id, id_part)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    text = config["OPERATOR_NOTIFICATION"] + f"–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {text_part}"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(chat_id=callback.from_user.id, 
                            text=text)
    await bot.send_message(chat_id=id_part, 
                            text=config["ANSWER"])
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –∏–∑ —á–∞—Ç–∞
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    return

@dp.message_handler(content_types=types.ContentType.PHOTO)
@error_handler
async def handle_photo(message: types.Message):
    await handle_content_message(message, types.ContentType.PHOTO)


@dp.message_handler(content_types=types.ContentType.AUDIO)
@error_handler
async def handle_audio(message: types.Message):
    await handle_content_message(message, types.ContentType.AUDIO)


@dp.message_handler(content_types=types.ContentType.VIDEO)
@error_handler
async def handle_video(message: types.Message):
    await handle_content_message(message, types.ContentType.VIDEO)


@dp.message_handler(content_types=types.ContentType.VOICE)
@error_handler
async def handle_voice(message: types.Message):
    await handle_content_message(message, types.ContentType.VOICE)


@dp.message_handler(content_types=types.ContentType.DOCUMENT)
@error_handler
async def handle_document(message: types.Message):
    await handle_content_message(message, types.ContentType.DOCUMENT)


@dp.message_handler(content_types=types.ContentType.STICKER)
@error_handler
async def handle_sticker(message: types.Message):
    await handle_content_message(message, types.ContentType.STICKER)


@dp.message_handler(content_types=types.ContentType.VIDEO_NOTE)
@error_handler
async def handle_video_note(message: types.Message):
    await handle_content_message(message, types.ContentType.VIDEO_NOTE)


@dp.message_handler(content_types=types.ContentType.LOCATION)
@error_handler
async def handle_location(message: types.Message):
    await handle_content_message(message, types.ContentType.LOCATION)


@dp.message_handler(content_types=types.ContentType.CONTACT)
@error_handler
async def handle_contact(message: types.Message):
    await handle_content_message(message, types.ContentType.CONTACT)


async def outputInto(id, message, content_type):
    check = await function.CheckDialog(client_id=id)
    if check:
        sender_is_client = message.from_user.id == check[1]
        recipient_id = check[2] if sender_is_client else check[1]
        sender_name = "–ö–ª–∏–µ–Ω—Ç:" if sender_is_client else f"–û–ø–µ—Ä–∞—Ç–æ—Ä {function.CheckName(check[1])[2]}:"
        if content_type == types.ContentType.PHOTO:
            await bot.send_photo(chat_id=recipient_id, photo=message.photo[-1].file_id, caption=sender_name)
        elif content_type == types.ContentType.AUDIO:
            await bot.send_audio(chat_id=recipient_id, audio=message.audio.file_id, caption=sender_name)
        elif content_type == types.ContentType.VIDEO:
            await bot.send_video(chat_id=recipient_id, video=message.video.file_id, caption=sender_name)
        elif content_type == types.ContentType.VOICE:
            await bot.send_voice(chat_id=recipient_id, voice=message.voice.file_id, caption=sender_name)
        elif content_type == types.ContentType.DOCUMENT:
            await bot.send_document(chat_id=recipient_id, document=message.document.file_id, caption=sender_name)
        elif content_type == types.ContentType.STICKER:
            await bot.send_sticker(chat_id=recipient_id, sticker=message.sticker.file_id)
        elif content_type == types.ContentType.VIDEO_NOTE:
            await bot.send_video_note(chat_id=recipient_id, video_note=message.video_note.file_id)
        elif content_type == types.ContentType.LOCATION:
            await bot.send_location(chat_id=recipient_id, latitude=message.location.latitude, longitude=message.location.longitude)
        elif content_type == types.ContentType.CONTACT:
            await bot.send_contact(chat_id=recipient_id, phone_number=message.contact.phone_number, first_name=message.contact.first_name)

async def handle_content_message(message: types.Message, content_type: str):
    if message.chat.type == types.ChatType.PRIVATE:
        if id_dict.get(f"{message.from_user.id}") is not None:
            id = id_dict[f"{message.from_user.id}"]
            await outputInto(id, message, content_type)
        elif message.from_user.id in id_dict.values():
            id = message.from_user.id
            await outputInto(id, message, content_type)
        elif message.chat.type == types.ChatType.PRIVATE:
            await message.answer(text=config["TEXT_ONLY"])

async def OutputText(id, message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    check = await function.CheckDialog(client_id=id)
    # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å "question"
    if check:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è - –∫–ª–∏–µ–Ω—Ç
        if message.from_user.id == check[1]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
            name = await function.CheckName(check[1])
            await bot.send_message(chat_id=check[2], text=f"–û–ø–µ—Ä–∞—Ç–æ—Ä {name[2]}: " + message.text)
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–ø–µ—Ä–∞—Ç–æ—Ä
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            await bot.send_message(chat_id=check[1], text="–ö–ª–∏–µ–Ω—Ç: " + message.text)
    else:
        # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –Ω–µ "question", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
        if message.chat.type == types.ChatType.PRIVATE:
            check = await function.AcceptanceOfApplication(message)
            if check:
                await message.answer(text=config["APPLICATION_ACCEPTED"])
                current_datetime = datetime.datetime.now()
                formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M")
                text = f"üë®‚Äçüíº–ö–ª–∏–µ–Ω—Ç: {message.from_user.id}\nüìù –ó–∞—è–≤–∫–∞: {message.text}\nüìÖ –î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {formatted_datetime}"
                message_dirt[f"{message.from_user.id}"] = await bot.send_message(chat_id=config["chat_id"], text=text, reply_markup=keyboard.ikb_application)
            else:
                await message.answer(text=config["REFUSAL_OF_APPLICATION"])

@dp.message_handler(content_types=types.ContentType.TEXT)
@error_handler
async def echoAll(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è config.id
    if message.chat.type == types.ChatType.PRIVATE:
        if id_dict.get(f"{message.from_user.id}") is not None:
            id = id_dict[f"{message.from_user.id}"]
            await OutputText(id, message)
        elif message.from_user.id in id_dict.values():
            id = message.from_user.id
            await OutputText(id, message)
        else:
            # –ï—Å–ª–∏ config.id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
            if message.chat.type == types.ChatType.PRIVATE:
                check = await function.AcceptanceOfApplication(message)
                if check:
                    await message.answer(text=config["APPLICATION_ACCEPTED"])
                    current_datetime = datetime.datetime.now()
                    formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M")
                    text = f"üë®‚Äçüíº–ö–ª–∏–µ–Ω—Ç: {message.from_user.id}\nüìù –ó–∞—è–≤–∫–∞: {message.text}\nüìÖ –î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {formatted_datetime}"
                    message_dirt[f"{message.from_user.id}"] = await bot.send_message(chat_id=config["chat_id"], text=text, reply_markup=keyboard.ikb_application)
                else:
                    await message.answer(text=config["REFUSAL_OF_APPLICATION"])

@dp.errors_handler()
async def global_error_handler(update, exception):
    if isinstance(exception, (MessageNotModified, CantParseEntities, MessageToDeleteNotFound, MessageTextIsEmpty)):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–∏ –æ—à–∏–±–∫–∏
        return True

    logger.exception(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update} –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É: {exception}")

    return True

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)

